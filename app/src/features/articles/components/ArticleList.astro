---
import { slugify } from "@/utils/slugify";
import type { Article } from "../domain/Article";
import ArticleCard from "./ArticleCard.astro";
import { timeFormat } from "@/lib/timeFormat";
import Image from "@/components/ui/Image.astro";

interface TopCategoryArticles {
	slug: string;
	name: string;
	articles: Article[];
}

interface Props {
	articles: Article[];
	topCategoryArticles?: TopCategoryArticles[];
	newArticles?: Article[];
	category?: string;
}

const page = Number(Astro.url.searchParams.get("page") || 1);
const perPage = 10;

const { articles, topCategoryArticles, newArticles, category } =
	Astro.props as Props;
const top1 = articles[0];
const top2_3 = articles.slice(1, 3);
const top4_5 = articles.slice(3, 5);
const rest = articles.slice(5);
---
<div class="mt-2 max-w-7xl mx-auto">
  <div class="flex">
  <div class="w-full flex-1 lg:pr-4">
  <div class="flex gap-4 md:flex-row flex-col">
    {top1 && (
      <div class="flex-2 flex flex-col">
        <ArticleCard {...top1}  />
          <div class="grid grid-cols-2 gap-4">
{top4_5.map((article) => (
        <ArticleCard {...article} horizontal={false}  />
      ))} 
          </div>
      </div>
    )}

      <div class="flex-1 flex md:flex-col flex-row gap-2">
      {top2_3.map((article) => (
        <ArticleCard {...article}  />
      ))}
      </div> 
  </div>

 
{topCategoryArticles && topCategoryArticles.length > 0 && (
    <>
      <hr class="my-4 border-gray-300" />
      {topCategoryArticles.map((category) => (
        <div class="mt-4">
    <a href={`/${category.slug}`} class="no-underline text-black hover:text-blue-600">
    <h2 class="text-lg font-bold mb-2 flex items-center gap-2">
  <span class="w-2 h-6 bg-blue-500"></span>
  {category.name}
</h2>

          </a>
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            {category.articles.map((article) => (
              <ArticleCard {...article} />
            ))}
          </div>
        </div>
      ))}
    </>
  )}

   {rest.length > 0 && (
  <hr class="my-4 border-gray-300" />
    <div id="articles-list" class="flex flex-col grid-cols-4 gap-4 mt-4">
      {rest.map((article) => (
    <ArticleCard {...article} horizontal={true} />
      ))}
    </div>
           <div
        id="loader"
        role="status"
        class="text-center py-4 flex justify-center w-full mx-auto"
        style="display: none;"
      >
        <svg
          aria-hidden="true"
          class="w-8 h-8 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600 items-center"
          viewBox="0 0 100 101"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
            fill="currentColor"></path>
          <path
            d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
            fill="currentFill"></path>
        </svg>
        <span class="sr-only">Loading...</span>
      </div>

         )}
      
     
  </div>




  <div class="pl-4 py-2 border-l border-gray-300 w-80 lg:block hidden">
    <h2 class="text-lg font-bold mb-2 flex items-center gap-2">
  <span class="w-2 h-6 bg-red-500"></span>
    Mới cập nhập gần đây
</h2>

{newArticles && newArticles.length > 0 ? (
    
    
<ol class="relative border-s border-gray-200 dark:border-gray-700">                  
{
newArticles.map((article) => (
<a href={`/${article.categories.map(slugify).join("/")}/${slugify(article.title)}-${article.id}`} class="no-underline text-black hover:text-blue-600">
  <li class="mb-6 ms-4">
<div class="absolute w-3 h-3 bg-gray-200 rounded-full mt-1.5 -start-1.5 border border-white dark:border-gray-900 dark:bg-gray-700"></div>
<time class="mb-1 text-sm font-normal leading-none text-gray-400 dark:text-gray-500">{timeFormat(article.publishedAt!)}</time>
            <div class="flex items-start justify-between">
              <div>
  <h3 class="text-lg font-semibold text-gray-900 dark:text-white">{article.title}</h3>
            <p class="text-xs font-normal text-gray-500 dark:text-gray-400 pt-1" >{article.author}</p>
              </div>
              <Image src={article.thumbnailUrl} alt={article.title} className="w-20 h-20 object-cover rounded-lg ms-2" />
            </div>
</li>
</a>
))
}
  
</ol>


    ) : (
      <p>Không có bài viết mới nào.</p>
    )}
    </div>
  </div>
</div>

<script
  type="module"
  is:inline
define:vars={{ page, perPage, category }}
>
  function slugify(text) {
    return text
      .toLowerCase()
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "")
      .replace(/đ/g, "d")
      .replace(/[^a-z0-9\s-]/g, "")
      .trim()
      .replace(/\s+/g, "-")
      .replace(/-+/g, "-");
  }
  let currentPage = page;
  let isLoading = false;
  let isNext = true;
  const loader = document.getElementById("loader");
  const list = document.getElementById("articles-list");

  async function fetchMore() {
    if (isLoading) return;
    isLoading = true;
    loader.style.display = "flex";

    try {
      const res = await fetch(
        `/api/v1/articles?page=${currentPage + 1}&perPage=${perPage}${category ? `&category=${category}` : ""}`,
      );
      const r = await res.json();
      const data = r.data;
      if (!data || data.length  < perPage ) {
        isNext = false;
        loader.textContent = "No more articles.";
      }else{

      data.forEach((article) => {
        const div = document.createElement("a");
        div.href = `/${article.categories.map(slugify).join("/")}/${slugify(article.title)}-${article.id}`;
        div.className =
          "rounded-lg mb-4 overflow-hidden flex gap-4 items-start";
        div.innerHTML = `
    <div class="md:w-1/3 w-36 flex-shrink-0 aspect-video rounded-lg bg-gray-200 overflow-hidden">
      <img src="${article.thumbnailUrl || "https://placehold.co/600x400/png"}" class="w-full h-full object-cover"/>
    </div>
    <div class="flex-1">
      <h2 class="md:text-xl text-md font-bold">${article.title}</h2>
      <p class="text-sm md:block hidden">${article.shortDescription}</p>
      <small class="text-xs text-gray-500 md:block hidden">${new Date(article.publishedAt).toLocaleDateString()} - ${article.author}</small>
    </div>
  `;
        list.appendChild(div);
      });
      }

      currentPage++;
      if (!isNext) {
        loader.textContent = "Không còn bài viết nào.";
      } else {
        loader.style.display = "none";
      }
    } catch (err) {
      console.error("Fetch error:", err);
      loader.textContent = "Error loading more articles.";
    } finally {
      isLoading = false;
    }
  }

  window.addEventListener("scroll", () => {
    if (isLoading || !isNext) return;
    const { scrollTop, scrollHeight, clientHeight } = document.documentElement;
    if (scrollTop + clientHeight >= scrollHeight - 200) {
      fetchMore();
    }
  });
</script>


